from flask import Flask, request, jsonify, render_template
import openai
import uuid
import os
import json
import time
import traceback
import re

app = Flask(__name__, template_folder="templates", static_folder="static")
openai.api_key = open(".openai_key").read().strip() if os.path.exists(".openai_key") else None

ASSISTANT_ID = "asst_......"  # –ó–∞–º—ñ–Ω–∏ –Ω–∞ —Å–≤—ñ–π

analyzed_requests = {}

@app.route("/")
def index():
    return render_template("index.html", data=analyzed_requests)

@app.route("/analyze", methods=["POST"])
def analyze():
    data = request.get_json()
    session_id = str(uuid.uuid4())

    user_prompt = f"""
–¢–∏ –µ–∫—Å–ø–µ—Ä—Ç –∑ –±–µ–∑–ø–µ–∫–∏ –≤–µ–±-–¥–æ–¥–∞—Ç–∫—ñ–≤. –ü—Ä–æ–≤–µ–¥–∏ –≥–ª–∏–±–æ–∫–∏–π –∞–Ω–∞–ª—ñ–∑ –Ω–∞–≤–µ–¥–µ–Ω–æ–≥–æ HTTP-–∑–∞–ø–∏—Ç—É —ñ –≤–∫–∞–∂–∏ –≤—Å—ñ –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ –≤—Ä–∞–∑–ª–∏–≤–æ—Å—Ç—ñ –∞–±–æ —Ä–∏–∑–∏–∫–∏, —â–æ –º–æ–∂—É—Ç—å –±—É—Ç–∏ —É –∑–∞–ø–∏—Ç—ñ. 
–í—Ä–∞—Ö—É–π –Ω–∞—Å—Ç—É–ø–Ω—ñ —Ç–∏–ø–∏ –∞—Ç–∞–∫:
  - SQLi
  - XSS
  - SSRF
  - CSRF
  - RCE
  - IDOR
  - LFI/RFI
  - Graphql/API
  - JWT
  - CRLF
  - Web cache poisoning
  - Request smuggling
  - OWASP TOP 10
- –ó–∞–∑–Ω–∞—á —è–∫—ñ –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—Ä–∞–∑–ª–∏–≤–∏–º–∏ –¥–æ –∫–æ–∂–Ω–æ—ó –∞—Ç–∞–∫–∏, –¥–µ —ñ —è–∫ –º–æ–∂–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞—Ç–∏ payload
- –í–∫–∞–∂–∏ –∑–∞–≥—Ä–æ–∑–∏, –ø–æ–≤'—è–∑–∞–Ω—ñ —ñ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏ –∑–∞–ø–∏—Ç—É (—è–∫—â–æ —î). –û—Å–æ–±–ª–∏–≤–æ –∑–≤–µ—Ä–Ω–∏ —É–≤–∞–≥—É –Ω–∞:
  - `Host`
  - `User-Agent`
  - `X-Forwarded-For`
  - –Ü–Ω—à—ñ –∑–∞–≥–æ–ª–æ–≤–∫–∏, —â–æ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –≤—Ä–∞–∑–ª–∏–≤–∏–º–∏
- –ù–∞–ø–∏—à–∏ –ø–æ—è—Å–Ω–µ–Ω–Ω—è, —á–æ–º—É —Ü–µ —î –≤—Ä–∞–∑–ª–∏–≤—ñ—Å—Ç—é.
- –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–±—Ä–æ–±–ª—è—é—Ç—å—Å—è –ø–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑–∞–ø–∏—Ç—É, —ñ —á–∏ –Ω–µ —ñ—Å–Ω—É—î –ø—Ä–æ–±–ª–µ–º–∏ –∑ –±–µ–∑–ø–µ–∫–æ—é.

–ü–æ–≤–µ—Ä–Ω–∏ JSON —É–∫—Ä–∞—ó–Ω—Å—å–∫–æ—é –º–æ–≤–æ—é –∑ —Ç–∞–∫–∏–º–∏ –∫–ª—é—á–∞–º–∏:
- "–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—èEndpoint"
- "–º–µ—Ö–∞–Ω—ñ–∑–º–ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó"
- "–ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ–í—Ä–∞–∑–ª–∏–≤–æ—Å—Ç—ñ" ‚Äî —Å–ø–∏—Å–æ–∫ –æ–±'—î–∫—Ç—ñ–≤:
  —Ç–∏–ø–ê—Ç–∞–∫–∏, –ø–æ—è—Å–Ω–µ–Ω–Ω—è, –ø–∞—Ä–∞–º–µ—Ç—Ä, payload
- "–∫–æ–º–µ–Ω—Ç–∞—Ä"

–ú–µ—Ç–æ–¥: {data.get('method')}
–®–ª—è—Ö: {data.get('path')}
–ó–∞–≥–æ–ª–æ–≤–∫–∏: {data.get('headers')}
–¢—ñ–ª–æ: {data.get('body')}
"""

    try:
        thread = openai.beta.threads.create()
        openai.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content=user_prompt
        )
        run = openai.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id=ASSISTANT_ID
        )

        while True:
            run_status = openai.beta.threads.runs.retrieve(
                thread_id=thread.id,
                run_id=run.id
            )
            if run_status.status == "completed":
                break
            elif run_status.status in ["failed", "cancelled"]:
                return jsonify({"error": "–ê—Å–∏—Å—Ç–µ–Ω—Ç –Ω–µ –∑–º—ñ–≥ –æ–±—Ä–æ–±–∏—Ç–∏ –∑–∞–ø–∏—Ç"}), 500
            time.sleep(1)

        messages = openai.beta.threads.messages.list(thread_id=thread.id)
        answer = messages.data[0].content[0].text.value
        print("üîç –í—ñ–¥–ø–æ–≤—ñ–¥—å –≤—ñ–¥ GPT:\n", answer)

        # –û—á–∏—Å—Ç–∫–∞ markdown, –ª–∞–ø–æ–∫
        cleaned = answer.strip()
        if cleaned.startswith("```"):
            cleaned = re.sub(r"^```(json)?", "", cleaned)
            cleaned = re.sub(r"```$", "", cleaned)
        cleaned = cleaned.replace("‚Äú", "\"").replace("‚Äù", "\"").replace("‚Äò", "'").replace("‚Äô", "'")

        try:
            parsed = json.loads(cleaned)

            if isinstance(parsed.get("–ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ–í—Ä–∞–∑–ª–∏–≤–æ—Å—Ç—ñ"), list):
                converted = []
                for item in parsed["–ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ–í—Ä–∞–∑–ª–∏–≤–æ—Å—Ç—ñ"]:
                    if isinstance(item, dict):
                        converted.append({
                            "—Ç–∏–ø–ê—Ç–∞–∫–∏": item.get("—Ç–∏–ø–ê—Ç–∞–∫–∏") or item.get("–Ω–∞–∑–≤–∞") or "‚Äî",
                            "–ø–æ—è—Å–Ω–µ–Ω–Ω—è": item.get("–ø–æ—è—Å–Ω–µ–Ω–Ω—è") or item.get("–æ–ø–∏—Å") or "‚Äî",
                            "–ø–∞—Ä–∞–º–µ—Ç—Ä": item.get("–ø–∞—Ä–∞–º–µ—Ç—Ä", ""),
                            "payload": item.get("payload", "")
                        })
                    elif isinstance(item, str):
                        converted.append({
                            "—Ç–∏–ø–ê—Ç–∞–∫–∏": "‚Äî",
                            "–ø–æ—è—Å–Ω–µ–Ω–Ω—è": item,
                            "–ø–∞—Ä–∞–º–µ—Ç—Ä": "",
                            "payload": ""
                        })
                parsed["–ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ–í—Ä–∞–∑–ª–∏–≤–æ—Å—Ç—ñ"] = converted

            parsed.setdefault("–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—èEndpoint", "‚Äî")
            parsed.setdefault("–º–µ—Ö–∞–Ω—ñ–∑–º–ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó", "‚Äî")
            parsed.setdefault("–ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ–í—Ä–∞–∑–ª–∏–≤–æ—Å—Ç—ñ", [])
            parsed.setdefault("–∫–æ–º–µ–Ω—Ç–∞—Ä", "‚Äî")

        except json.JSONDecodeError as e:
            print("‚ùå JSON –ø–æ–º–∏–ª–∫–∞:", str(e))
            parsed = {
                "–ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—èEndpoint": "‚Äî",
                "–º–µ—Ö–∞–Ω—ñ–∑–º–ê–≤—Ç–µ–Ω—Ç–∏—Ñ—ñ–∫–∞—Ü—ñ—ó": "‚Äî",
                "–ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω—ñ–í—Ä–∞–∑–ª–∏–≤–æ—Å—Ç—ñ": [],
                "–∫–æ–º–µ–Ω—Ç–∞—Ä": "‚ö†Ô∏è GPT –Ω–µ –ø–æ–≤–µ—Ä–Ω—É–≤ –≤–∞–ª—ñ–¥–Ω–∏–π JSON",
                "output": answer
            }

        pretty_input = json.dumps(data, indent=2, ensure_ascii=False)
        pretty_output = json.dumps(parsed, indent=2, ensure_ascii=False)

        analyzed_requests[session_id] = {
            "id": session_id,
            "input": pretty_input,
            "output": parsed,
            "output_pretty": pretty_output,
            "attacks": None
        }

        return jsonify({"status": "ok", "sessionId": session_id}), 200

    except Exception as e:
        print("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞:\n", traceback.format_exc())
        return jsonify({"error": str(e)}), 500

@app.route("/generate_attacks", methods=["POST"])
def generate_attacks():
    req = request.get_json()
    session_id = req.get("sessionId")
    if session_id not in analyzed_requests:
        return jsonify({"error": "Invalid session ID"}), 404

    data = analyzed_requests[session_id]["input"]
    parsed = json.loads(data)

    user_prompt = f"""
–ó–≥–µ–Ω–µ—Ä—É–π –º–æ–∂–ª–∏–≤—ñ —Ç–æ—á–∫–∏ –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è –Ω–∞ –≤—Ä–∞–∑–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è HTTP-–∑–∞–ø–∏—Ç—É. –î–ª—è –∫–æ–∂–Ω–æ—ó —Ç–æ—á–∫–∏ –≤–∫–∞–∂–∏:

- –¢–∏–ø –∞—Ç–∞–∫–∏ –¥–ª—è –ø–æ—Ç–µ–Ω—Ü—ñ–π–Ω–∏—Ö –≤–µ–∫—Ç–æ—Ä—ñ–≤ —É —Ü—å–æ–º—É –∑–∞–ø–∏—Ç—ñ (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ XSS, SQLi, SSRF, RCE, IDOR, HTTPP, Host header attack, CRLF —Ç–∞ —ñ–Ω—à—ñ)
- –ü–∞—Ä–∞–º–µ—Ç—Ä –∞–±–æ –ø–æ–ª–µ, —è–∫–µ –ø—ñ–¥–ª—è–≥–∞—î —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—é —ñ –ø—ñ–¥–±–∞–¥–∞—é—Ç—å –ø—ñ–¥ –≤–∫–∞–∑–∞–Ω—ñ –≤—Ä–∞–∑–ª–≤–æ—Å—Ç—ñ
- –ü—Ä–∏–∫–ª–∞–¥ payload
- –ü–æ—è—Å–Ω–µ–Ω–Ω—è —â–æ–¥–æ —Ç–æ–≥–æ, —è–∫ —Ü–µ–π –ø–∞—Ä–∞–º–µ—Ç—Ä –∞–±–æ –ø–æ–ª–µ –º–æ–∂–µ –±—É—Ç–∏ –≤—Ä–∞–∑–ª–∏–≤–∏–º

–ú–µ—Ç–æ–¥: {parsed.get('method')}
–®–ª—è—Ö: {parsed.get('path')}
–ó–∞–≥–æ–ª–æ–≤–∫–∏: {parsed.get('headers')}
–¢—ñ–ª–æ: {parsed.get('body')}

–§–æ—Ä–º–∞—Ç—É–π —è–∫ —Å–ø–∏—Å–æ–∫ JSON-–æ–±‚Äô—î–∫—Ç—ñ–≤:
[
  {{
    "—Ç–∏–ø–ê—Ç–∞–∫–∏": "SQLi",
    "–ø–æ–ª–µ": "username",
    "payload": "' OR 1=1 --",
    "–ø–æ—è—Å–Ω–µ–Ω–Ω—è": "..."
  }}
]
"""

    try:
        thread = openai.beta.threads.create()
        openai.beta.threads.messages.create(
            thread_id=thread.id,
            role="user",
            content=user_prompt
        )
        run = openai.beta.threads.runs.create(
            thread_id=thread.id,
            assistant_id=ASSISTANT_ID
        )

        while True:
            run_status = openai.beta.threads.runs.retrieve(
                thread_id=thread.id,
                run_id=run.id
            )
            if run_status.status == "completed":
                break
            elif run_status.status in ["failed", "cancelled"]:
                return jsonify({"error": "–ê—Ç–∞–∫–∏ –Ω–µ –∑–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ"}), 500
            time.sleep(1)

        messages = openai.beta.threads.messages.list(thread_id=thread.id)
        answer = messages.data[0].content[0].text.value
        print("üìå –í—ñ–¥–ø–æ–≤—ñ–¥—å –∞—Ç–∞–∫:\n", answer)

        cleaned = answer.strip()
        if cleaned.startswith("```"):
            cleaned = re.sub(r"^```(json)?", "", cleaned)
            cleaned = re.sub(r"```$", "", cleaned)
        cleaned = cleaned.replace("‚Äú", "\"").replace("‚Äù", "\"").replace("‚Äò", "'").replace("‚Äô", "'")

        try:
            attacks = json.loads(cleaned)
        except json.JSONDecodeError:
            attacks = [{"—Ç–∏–ø–ê—Ç–∞–∫–∏": "N/A", "–ø–æ—è—Å–Ω–µ–Ω–Ω—è": answer}]

        analyzed_requests[session_id]["attacks"] = attacks

        return jsonify({
            "status": "ok",
            "sessionId": session_id,
            "attacks": attacks
        })

    except Exception as e:
        print("‚ùå –í–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ —É generate_attacks:\n", traceback.format_exc())
        return jsonify({"error": str(e)}), 500

if __name__ == "__main__":
    app.run(port=5000)
